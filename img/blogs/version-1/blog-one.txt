Version 1.0

It’s July 2020, a year that has been credited with bringing in so much drastic changes and an incomprehensible amount of chaos throughout the world. But somehow, amongst all of it I managed to publicly release an app! My very first production level software. It was a very simple app that displayed a player’s statistics in a video game. It pulled the data from an external api and displayed it locally to the user in a simple form. 

To my surprise the app did quite well in its own rights. It was able to gain over 5000+ downloads within 4 months of it being public all while maintaining a positive review on the Google Play Store. 

The idea behind the app was for me to get exposed to the reality of production grade software and what it took to keep one up and working for daily consumption of the masses. I wanted to learn more about proper maintenance, regular version updates, bug fixes, scaling based on user demand and a lot more all while making sure the app stays live and has minimum downtime. I had an amazing time doing this. You could say that I was right in my zone! 

It’s a very surreal thing, talking something like an app from initial planning and wire-framing to putting it out for the public to use. It’s even better when it does well. The app was called Six Companion and it was live on the play store. The app used an api from a provider to get the data being displayed. Unfortunately the api the provider shut down their api and I had to take the app down with it. Nevertheless, it was a great learning experience and the app did exactly what I expected from it. I got exposed to the world of production software and all the challenges and uncertainties that come along with it, all be it for a short period of time. 

However any experience is knowledge gained so let me summarise a couple of things I learnt throughout this little project of mine. 

You don’t need to wait for perfect and extremely optimised code. This is something I was worried about too. The idea of pushing out code that maybe very basic or “noobish” and not be as good as the pros do it or may not be optimised to render out blazing fast load times did scare me for a long time. The idea that a future employer may see that code and be like “this is not good enough” piled onto that fear too. The reality however, is far from it.  You’re always better off having a simple but a working project on your resume to account for your experience rather than having an idea about a perfectly coded dream app that never crashes. 

Make use of tools that ease help ease your workload. The Google backend ecosystem. Tools like Google Firebase, Google AdMob, Google Adsense are some very very powerful pieces of software. Implementation of anyone of these is a piece of cake that take no more than 5-10 lines of code to get you started. All of these tools are pretty much free to get started with and stay free even as your app grows. You’ll only need to start paying once you start managing huge databases or scale across hundreds and thousands of users. These apps have made is incredibly simple to keep track of every single aspect of your app in production. From new a user on-boarding to versions of your app being used most, regions your app is most popular in and anything else you may want keep an eye on. 

Logging and crash reporting. This is one of the most important points to take note of. Crashlytics among many others is a tool that comes as a part of Firebase and it is a lifesaver. It is a logger that gives you detailed information and trace logs whenever your app crashes or encounters any sort of unexpected behaviour. It literally takes about 2 mins to get started with it and does so with barely any code. 

Take note of the requirements. Setting up a developer account, pushing an app to the play console each have their own requirements. Make sure you read and get to know them beforehand to avoid any issues later on down the line.                        For eg. While pushing your app to the play console you can’t have it’s package name starting with “com.example.yourdomain” since the “com.example” is reserved by Google for their apps. I got to know that when I first tried to publish it. Lol. 

I’ve only managed to barely scratch the surface here. There’s so much more you get to learn on your own. Prioritising bug fixes, pushing up timely updates, keeps the users engaged with your product are all things you get to learn as you go on. This is the very reason why a Version 1.0 is so important as opposed to waiting for a perfect version of it. You can always keep building upon it and keep fixing any issues that pop up because they will. With thousands of versions of android phones and each with their own tweaks and turns you’re bound to run to issues but that’s okay because it can always be fixed! So get going with version 1 and the rest will follow!